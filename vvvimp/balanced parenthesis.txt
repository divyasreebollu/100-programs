Subset Sum 
Given a set of non-negative integers, and a value S, determine if there is a subset of the given set with sum equal to S.



Input Format

The first line of the input contains T - the number of test cases. It is followed by 2T lines - the first line of each test case contains N - number of elements in given array and S - the required sum. The second line contains elements of the array.



Output Format

For each test case, print "YES" if there is a subset of the given set with sum equal to given S, otherwise "NO", separated by new line .



Constraints

30 points

1 <= N <= 10

0 <= S <= 100



120 points

1 <= N <= 100

0 <= S <= 1000



General Constraints

1 <= T <= 100

0 <= A[i] <= 103



Example

Input

2

5 15

10 4 5 9 1

5 17

13 11 19 20 21



Output

YES

NO



Explanation



Example 1:

15 = 9 + 5 + 1



Example 2:

No such subset exists.


Balanced Parentheses 
Write a program to generate all possible strings with balanced parentheses having N pairs of curly braces.



Input Format

The first line of input contains T - the number of test cases. It's followed by T lines, each containing a single integer N.



Output Format

For each test case, print each combinational pair of balanced parenthesis of length N in a lexicographical order along with the test case number, separated by a new line.



Constraints

1 <= T <= 12

1 <= N <= 12



Example

Input

2

3

2



Output

Test Case #1:
{{{}}}
{{}{}}
{{}}{}
{}{{}}
{}{}{}
Test Case #2:
{{}}
{}{}


Explanation



Self Explanatory


def parenthesis(n,oc,cc,ch,idx):
    if(idx==2 * n):
        print(''.join(ch))
        return
    if(oc<n):
        ch[idx]='{'
        parenthesis(n, oc+1, cc, ch, idx+1)
    if(cc<oc):
        ch[idx]='}'
        parenthesis(n, oc, cc+1, ch, idx+1)
t=int(input( ))
for i in range(t):
    n=int(input())
    ch=[''] * (2 * n)
    print(f"Test Case #{i+1}:")
    parenthesis(n, 0, 0, ch, 0)
