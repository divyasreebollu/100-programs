Single Number
Programming
Bit Manipulation
Easy
73.8% Success

230

10

Bookmark
Asked In:
Problem Description
 
 

Given an array of integers A, every element appears twice except for one. Find that single one.


NOTE: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?



Problem Constraints
1 <= |A| <= 2000000

0 <= A[i] <= INTMAX



Input Format
First and only argument of input contains an integer array A.



Output Format
Return a single integer denoting the single element.



Example Input
Input 1:

 A = [1, 2, 2, 3, 1]
Input 2:

 A = [1, 2, 2]


Example Output
Output 1:

 3
Output 2:

 1

class Solution:
    # @param A : tuple of integers
    # @return an integer
    def singleNumber(self, A):
        single_number = 0
        for num in A:
            single_number ^= num
        return single_number

# Example usage:
if __name__ == "__main__":
    # Read input as a list of integers
    A = list(map(int, input().split()))
    
    # Create an instance of Solution class
    solution = Solution()
    
    # Call the singleNumber method from the Solution instance
    print(solution.singleNumber(A))
 

        
